@font-face {
    font-family: 'Alte Haas Grotesk';
    src: url('/fonts/AlteHaasGroteskRegular.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'Alte Haas Grotesk';
    src: url('/fonts/AlteHaasGroteskBold.ttf') format('truetype');
    font-weight: bold;
    font-style: normal;
}

@font-face {
    font-family: 'Averia Serif Libre';
    src: url('/fonts/AveriaSerifLibre-Regular.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'Averia Serif Libre';
    src: url('/fonts/AveriaSerifLibre-Italic.ttf') format('truetype');
    font-weight: normal;
    font-style: italic;
}

@font-face {
    font-family: 'Averia Serif Libre';
    src: url('/fonts/AveriaSerifLibre-Bold.ttf') format('truetype');
    font-weight: bold;
    font-style: normal;
}

@font-face {
    font-family: 'Averia Serif Libre';
    src: url('/fonts/AveriaSerifLibre-BoldItalic.ttf') format('truetype');
    font-weight: bold;
    font-style: italic;
}

@font-face {
    font-family: 'Averia Serif Libre';
    src: url('/fonts/AveriaSerifLibre-Light.ttf') format('truetype');
    font-weight: lighter;
    font-style: normal;
}

@font-face {
    font-family: 'Averia Serif Libre';
    src: url('/fonts/AveriaSerifLibre-LightItalic.ttf') format('truetype');
    font-weight: lighter;
    font-style: italic;
}

:root {
    overscroll-behavior: none;

    --color-ink: #004058;
    --color-sky: #E9F0FF;
    --color-paper: #EEEEEE;
    --color-blue: cornflowerblue;
    --color-red: indianred;

    --font-serif: 'Averia Serif Libre', Georgia, 'Times New Roman', Times, serif;
    --font-sans: 'Alte Haas Grotesk', Helvetica, Arial, sans-serif;

    background-color: var(--color-sky);
}

* {
    box-sizing: border-box;
}

body {
    margin: 0;
    width: 100%;
    height: 100vh;
}

h1,
h2,
h3 {
    text-wrap: balance;
}

button {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    border: unset;
    border-radius: unset;
    background: unset;
    cursor: pointer;
    margin: unset;
    padding: unset;
}

.sans,
h1,
h2,
h3 {
    font-family: var(--font-sans);
}

.serif,
p {
    font-family: var(--font-serif);
}

.map-container {
    width: 100vw;
    height: 100svh;
    position: fixed;
    z-index: 1;
    overflow: hidden;

    display: flex;
    align-items: center;
    justify-content: center;

    touch-action: none;

    --x: 0px;
    --y: 0px;
    --scale: 1;

    --map-starting-width: min(calc(100vw - 32px), calc(80svh - 32px));
}

.map-container .map {
    aspect-ratio: 4 / 5;

    border: 2.5px solid var(--color-ink);
    width: var(--map-starting-width);

    image-rendering: pixelated;
    background-image: url(/art/bigmapW4_small.jpg);
    background-position: center;
    background-size: cover;

    position: relative;

    transform: translate(var(--x), var(--y)) scale(var(--scale, 1));
}

.map-container .labels {
    position: absolute;
    pointer-events: none;
    user-select: none;
    aspect-ratio: 4 / 5;
    width: calc(var(--scale) * var(--map-starting-width));
    transform: translate(var(--x), var(--y));
}

.map-container .labels a {

    font-size: calc(1em / var(--scale));
    font-size: 1em;
    font-size: calc(1em * sqrt(var(--scale)));
    line-height: 1;

    font-family: var(--font-serif);
    text-decoration: none;
    color: black;

    position: absolute;
    pointer-events: all;

    --x: 9999%;
    --y: 9999%;
    top: var(--y);
    left: var(--x);

    &.left {
        /* transform-origin: left; */
    }

    &.center {
        transform: translate(-50%, -50%);
    }

    
    &:hover, &.selected {
        background-color: #ffffffcc;
        backdrop-filter: blur(4px);
        box-shadow: 2.5px 2.5px 0 #00000011;
    }

    z-index: 2;
    &:hover {
        z-index: 4;
    }
    
    &.selected {
        z-index: 3;
        color: indianred;
        cursor: no-drop;
    }
}

.map-container .border {
    position: absolute;
    pointer-events: none;
    user-select: none;
    border: 2.5px solid var(--color-ink);
    border-width: 4px;

    /* width needs to be the starting width * scale, minus the distance  */
    /* x/y pos should be clamped above 0, because the top/left border should always be visible */
    /* x/y pos doesn't need to be clamped down, because w/h will decrease */

    --w: calc(var(--map-starting-width) * var(--scale));
    --h: calc(var(--map-starting-width) * var(--scale) * 5 / 4);

    /* 
        when top/left, width/height
       needs to decrease by the distance
       of the map past the edge of the viewport

       distance beyond edge of viewport:
       abs(pos) - ((100vw - mapWidth) / 2)
    */

    --w-clamped: calc(var(--w) - max(0px, abs(var(--x)) - ( 100vw - var(--w) ) / 2));
    --h-clamped: calc(var(--h) - max(0px, abs(var(--y)) - ( 100svh - var(--h) ) / 2));

    width: var(--w-clamped);
    height: var(--h-clamped);

    /* 
        when distance beyond edge of viewport is greater than 0
        I need to translate *less* half that distance

        when pos is negative, I need to add half the distance
        when pos is positive, I need to subtract half the distance

        get portion of pos beyond viewport edge:
        pos * max(0px, abs(pos) - ((100v - mapSize) / 2)) / abs(pos)

        if pos is negative, this will be negative, and vice versa

        so I get pos, and subtract the portion of it that's outside the viewport
        in other words, I want the portion of pos that's NOT outside the viewport

        so pos * (1 - portion)

        newpos = portion of pos that's within viewport
        newpos = pos - portion outside of viewport

        if |x| is greater than half viewport, I want to multiply x so that it stays within viewport
        if |x| is less than half viewport, I want to multiply it by 1

        keep x bounded:
        clamp(x, -50vw, 50vw)

        but I actually want to clamp it to:
        clamp(x, -50vw + borderwidth/2, 50vw - borderwidth/2)

        newpos = x * max(0, |x| - 50vw) / 50vw
    */

    --x-clamped: clamp(var(--x), calc(-50vw + var(--w-clamped) / 2), calc(50vw - var(--w-clamped) / 2));
    --y-clamped: clamp(var(--y), calc(-50svh + var(--h-clamped) / 2), calc(50svh - var(--h-clamped) / 2));

    transform: translate(var(--x-clamped), var(--y-clamped));
}

.sidebar {
    position: fixed;
    right: 0;
    top: 0;
    height: 100vh;
    z-index: 10;

    width: min(45ch, 100%);
    height: calc(100vh - 16px);
    margin: 8px;

    overflow-y: scroll;
    overflow-x: hidden;
    overscroll-behavior: none;

    color: var(--color-ink);

    border: 4px solid var(--color-ink);
    border-radius: 2px;
    background-color: #ffffffcc;
    backdrop-filter: blur(4px);
    box-shadow: 4px 4px 0 #00000022;
}

.sidebar p, .sidebar a {
    text-decoration: underline;
    text-decoration-style: dotted;
    text-decoration-color: var(--color-ink);
}

.sidebar ::selection {
    color: var(--color-paper);
    background-color: var(--color-ink);
}

.sidebar a {
    color: var(--color-blue);
    cursor: pointer;
}

.sidebar span.bad-link {
    color: var(--color-red);
    text-decoration-color: inherit;
    cursor: no-drop;
}

.search {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 10;
    margin: 8px;

    display: grid;
    grid-template-columns: 80px 30ch;
}

.search .img {
    background-image: url("/art/little-orange-house.png");
    image-rendering: pixelated;
    /* aspect-ratio: 18 / 10; */
    height: 40px;
    background-size: 80px 80px;
    background-position-y: -44px;
    border-block: 4px solid black;
    box-shadow: 4px 4px 0 #00000011;

    transition: background-position-y 0.2s;

}

.search:focus-within .img {
    background-position-y: -4px;
}

.search label {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 0.2em;
    border: 4px solid black;
    border-left: none;

    cursor: text;

    background-color: #ffffffcc;
    backdrop-filter: blur(4px);
    box-shadow: 4px 4px 0 #00000011;

    &,
    & ::placeholder,
    input {
        font-family: var(--font-sans);
        font-weight: bold;
        color: var(--color-ink);
        font-size: 1rem;
    }

    & ::placeholder {
        opacity: 0.5;
    }
}

.search input {
    width: 100%;
    flex: 1;
    border: none;
    background-color: unset;

    &:focus,
    &:focus-visible,
    &:focus-within {
        outline: none;
    }

    caret-color: var(--color-ink);
}

.search .keyhint {
    font-family: var(--font-serif);
    font-weight: bold;
    font-size: 0.75em;
    padding: 0.2em;
    color: var(--color-ink);
    display: inline-block;
    border-radius: 5px;
    border: 2px solid #00405858;
    filter: blur(1px);
    user-select: none;

    span {
        filter: blur(0px);
    }
}

.search:focus-within .keyhint {
    display: none;
}

.search ul {
    grid-row: 2;
    grid-column: 2;

    background-color: #ffffffcc;
    backdrop-filter: blur(4px);
    box-shadow: 4px 4px 0 #00000011;
    border: 4px solid black;
    border-top: none;

    list-style: none;
    margin: 0;
    padding: 0;

    margin-left: -4px;
    width: calc(100% + 4px);
}

.search li:not(:last-child) {
    border-bottom: 1px solid black;
}

.search li a {
    display: block;
    padding: 4px;

    color: var(--color-ink);
    text-decoration: none;

    font-family: var(--font-sans);
    font-weight: bold;
}

.search li a:focus-visible,
.search li a:hover {
    outline: none;
    background-color: var(--color-paper);
}

.ui-button {
    font-family: var(--font-sans);
    font-weight: bold;

    color: var(--color-ink);
    backdrop-filter: blur(4px);
    border: 2px solid var(--color-ink);
    border-radius: 9999px;

    aspect-ratio: 1 / 1;
    padding: 0.8ex;
    display: flex;
    align-items: center;
    justify-content: center;

    transition: rotate 0.5s;
}

.ui-button:hover {
    rotate: 380deg;
}

.ui-button:focus-visible {
    rotate: 20deg;
}